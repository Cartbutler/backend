generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  category_id   Int        @id @default(autoincrement())
  category_name String     @unique
  image_path    String?    @db.VarChar(255)
  products      products[]
}

model products {
  product_id    Int             @id @default(autoincrement())
  product_name  String
  description   String
  price         Float
  stock         Int
  category_id   Int
  image_path    String
  created_at    DateTime        @default(now())
  category_name String?         @db.VarChar(255)
  cartItems     cartItems[]
  product_store product_store[]
  category      categories      @relation(fields: [category_id], references: [category_id])

  @@index([category_id], map: "products_category_id_fkey")
}

model customers {
  customers_id Int      @id @default(autoincrement())
  first_name   String
  last_name    String
  email        String   @unique
  phone_number String
  address      String
  premium_rank Int
  date_joined  DateTime @default(now())
  orders       orders[]
}

model grocery_stores {
  store_id    Int      @id @default(autoincrement())
  store_name  String
  address     String
  rank        Int
  date_joined DateTime @default(now())
}

model employees {
  e_id   Int    @id @default(autoincrement())
  name   String
  f_name String
  l_name String
  email  String @unique
  phone  String
}

model db_users {
  user_id  Int    @id @default(autoincrement())
  username String @unique
  password String
}

model orders {
  order_id       Int       @id @default(autoincrement())
  customer_id    Int
  order_status   String
  order_day      DateTime
  payment_method String
  customer       customers @relation(fields: [customer_id], references: [customers_id])

  @@index([customer_id], map: "orders_customer_id_fkey")
}

model pSuggestions {
  id       Int    @id @default(autoincrement())
  name     String
  priority Int
}

model product_store {
  product_store_id Int      @id @default(autoincrement())
  product_id       Int
  store_id         Int
  price            Float    @db.Float
  stock            Int
  products         products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "product_store_ibfk_1")
  stores           stores   @relation(fields: [store_id], references: [store_id], onDelete: NoAction, onUpdate: NoAction, map: "product_store_ibfk_2")

  @@index([product_id], map: "product_id")
  @@index([store_id], map: "store_id")
}

model stores {
  store_id       Int             @id @default(autoincrement())
  store_name     String          @db.VarChar(255)
  store_location String          @db.VarChar(255)
  product_store  product_store[]
}

model cart {
  cart_id    Int         @id @default(autoincrement())
  user_id    Int
  created_at DateTime?   @default(now()) @db.Timestamp(0)
  users      users       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "cart_ibfk_1")
  cartItems  cartItems[]

  @@index([user_id], map: "user_id")
}

model cartItems {
  cart_item_id Int      @id @default(autoincrement())
  cart_id      Int
  product_id   Int
  quantity     Int
  cart         cart     @relation(fields: [cart_id], references: [cart_id], onDelete: NoAction, onUpdate: NoAction, map: "cartItems_ibfk_1")
  products     products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "cartItems_ibfk_2")

  @@index([cart_id], map: "cart_id")
  @@index([product_id], map: "product_id")
}

model users {
  user_id Int    @id @default(autoincrement())
  cart    cart[]
}
