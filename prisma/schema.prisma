generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  category_id   Int        @id @default(autoincrement())
  category_name String?    @unique @db.VarChar(255)
  image_path    String?    @db.VarChar(255)
  products      products[]
}

model products {
  product_id    Int             @id @default(autoincrement())
  product_name  String?         @db.VarChar(255)
  description   String?         @db.Text
  price         Float?          @db.Float
  stock         Int?
  category_id   Int?
  image_path    String?         @db.VarChar(255)
  created_at    DateTime?       @default(now()) @db.DateTime(0)
  category_name String?         @db.VarChar(255)
  cartItems     cartItems[]
  product_store product_store[]
  category      categories?     @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([category_id], map: "products_category_id_fkey")
}

model customers {
  customers_id Int       @id @default(autoincrement())
  first_name   String?   @db.VarChar(255)
  last_name    String?   @db.VarChar(255)
  email        String?   @unique @db.VarChar(255)
  phone_number String?   @db.VarChar(255)
  address      String?   @db.VarChar(255)
  premium_rank Int?
  date_joined  DateTime? @default(now()) @db.DateTime(0)
  orders       orders[]
}

model grocery_stores {
  store_id    Int       @id
  store_name  String?   @db.VarChar(255)
  address     String?   @db.VarChar(255)
  rank        Int
  date_joined DateTime? @default(now()) @db.DateTime(0)
}

model employees {
  e_id   Int     @id
  name   String? @db.VarChar(255)
  f_name String? @db.VarChar(255)
  l_name String? @db.VarChar(255)
  email  String? @unique(map: "email") @db.VarChar(255)
  phone  String? @db.VarChar(255)
}

model db_users {
  user_id  Int     @id
  username String? @unique @db.VarChar(255)
  password String? @db.VarChar(255)
}

model orders {
  order_id       Int        @id
  customer_id    Int?
  order_status   String?    @db.VarChar(255)
  order_day      DateTime?  @db.DateTime(0)
  payment_method String?    @db.VarChar(255)
  customer       customers? @relation(fields: [customer_id], references: [customers_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([customer_id], map: "orders_customer_id_fkey")
}

model pSuggestions {
  id       Int     @id
  name     String? @db.VarChar(255)
  priority Int?
}

model product_store {
  product_store_id Int       @id
  product_id       Int?
  store_id         Int?
  price            Float?    @db.Float
  stock            Int?
  products         products? @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "product_store_ibfk_1")
  stores           stores?   @relation(fields: [store_id], references: [store_id], onDelete: NoAction, onUpdate: NoAction, map: "product_store_ibfk_2")

  @@index([product_id], map: "product_store_ibfk_1")
  @@index([store_id], map: "product_store_ibfk_2")
}

model stores {
  store_id       Int             @id @default(autoincrement())
  store_name     String?         @db.VarChar(255)
  store_location String?         @db.VarChar(255)
  product_store  product_store[]
}

model cart {
  id        Int         @id @default(autoincrement())
  userId    String      @db.VarChar(36)
  quantity  Int?        @default(0)
  cartItems cartItems[]

  @@index([userId], map: "userId")
}

model users {
  userId String @id @db.VarChar(36)
}

model cartItems {
  id        Int       @id
  cartId    Int?
  productId Int?
  quantity  Int?
  cart      cart?     @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cartItems_ibfk_1")
  products  products? @relation(fields: [productId], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "cartItems_ibfk_2")

  @@unique([cartId, productId], map: "cartId_productId")
  @@index([productId], map: "productId")
}
